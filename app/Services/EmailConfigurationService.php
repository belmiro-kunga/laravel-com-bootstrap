<?php

namespace App\Services;

use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use App\Services\AuditService;

class EmailConfigurationService
{
    /**
     * Obter configura√ß√£o atual de email
     */
    public function getCurrentConfig(): array
    {
        return [
            'MAIL_MAILER' => config('mail.default'),
            'MAIL_HOST' => config('mail.mailers.smtp.host'),
            'MAIL_PORT' => config('mail.mailers.smtp.port'),
            'MAIL_USERNAME' => config('mail.mailers.smtp.username'),
            'MAIL_PASSWORD' => config('mail.mailers.smtp.password') ? '***configurada***' : '',
            'MAIL_ENCRYPTION' => config('mail.mailers.smtp.encryption'),
            'MAIL_FROM_ADDRESS' => config('mail.from.address'),
            'MAIL_FROM_NAME' => config('mail.from.name'),
        ];
    }

    /**
     * Validar configura√ß√£o de email
     */
    public function validateConfig(array $data): array
    {
        $issues = [];
        
        // Verificar configura√ß√µes b√°sicas
        if (empty($data['MAIL_FROM_ADDRESS']) || $data['MAIL_FROM_ADDRESS'] === 'hello@example.com') {
            $issues[] = 'Email remetente n√£o configurado ou ainda √© o padr√£o';
        }
        
        if (empty($data['MAIL_FROM_NAME']) || $data['MAIL_FROM_NAME'] === 'Laravel') {
            $issues[] = 'Nome remetente n√£o configurado ou ainda √© o padr√£o';
        }
        
        // Verificar configura√ß√µes SMTP se necess√°rio
        if ($data['MAIL_MAILER'] === 'smtp') {
            if (empty($data['MAIL_HOST']) || $data['MAIL_HOST'] === 'smtp.mailgun.org') {
                $issues[] = 'Host SMTP n√£o configurado ou ainda √© o padr√£o';
            }
            
            if (empty($data['MAIL_USERNAME'])) {
                $issues[] = 'Usu√°rio SMTP n√£o configurado';
            }
            
            if (empty($data['MAIL_PASSWORD'])) {
                $issues[] = 'Senha SMTP n√£o configurada';
            }
            
            if (empty($data['MAIL_PORT'])) {
                $issues[] = 'Porta SMTP n√£o configurada';
            }
        }
        
        return $issues;
    }

    /**
     * Atualizar configura√ß√£o de email
     */
    public function updateConfig(array $data, $user = null): bool
    {
        try {
            // Filtrar dados vazios
            $data = array_filter($data, function($value) {
                return $value !== null && $value !== '';
            });
            
            // Atualizar arquivo .env
            $this->updateEnvFile($data);
            
            // Limpar cache
            $this->clearConfigCache();
            
            // Log da altera√ß√£o
            if ($user) {
                AuditService::log($user, 'email_config_updated', 'Configura√ß√£o de email atualizada', [
                    'changed_fields' => array_keys($data)
                ]);
            }
            
            Log::info('Email configuration updated', [
                'user_id' => $user?->id,
                'changed_fields' => array_keys($data)
            ]);
            
            return true;
            
        } catch (\Exception $e) {
            Log::error('Failed to update email configuration', [
                'error' => $e->getMessage(),
                'user_id' => $user?->id,
                'data' => $data
            ]);
            
            throw $e;
        }
    }

    /**
     * Testar configura√ß√£o de email
     */
    public function testConfig(string $testEmail, $user = null): array
    {
        try {
            // Validar configura√ß√£o atual
            $currentConfig = $this->getCurrentConfig();
            $issues = $this->validateConfig($currentConfig);
            
            if (!empty($issues)) {
                return [
                    'success' => false,
                    'message' => 'Configura√ß√£o incompleta',
                    'issues' => $issues,
                    'suggestions' => $this->getSuggestionsForIssues($issues)
                ];
            }
            
            // Enviar email de teste
            Mail::raw($this->getTestEmailContent(), function ($message) use ($testEmail) {
                $message->to($testEmail)
                        ->subject('üß™ Teste de Email - Sistema de Den√∫ncias')
                        ->from(config('mail.from.address'), config('mail.from.name'));
            });
            
            // Log do teste bem-sucedido
            if ($user) {
                AuditService::log($user, 'email_test_success', 'Teste de email realizado com sucesso', [
                    'test_email' => $testEmail
                ]);
            }
            
            Log::info('Email test successful', [
                'user_id' => $user?->id,
                'test_email' => $testEmail
            ]);
            
            return [
                'success' => true,
                'message' => 'Email de teste enviado com sucesso! Verifique sua caixa de entrada.'
            ];
            
        } catch (\Exception $e) {
            // Log do erro
            if ($user) {
                AuditService::log($user, 'email_test_failed', 'Falha no teste de email', [
                    'test_email' => $testEmail,
                    'error' => $e->getMessage()
                ]);
            }
            
            Log::error('Email test failed', [
                'user_id' => $user?->id,
                'test_email' => $testEmail,
                'error' => $e->getMessage()
            ]);
            
            return [
                'success' => false,
                'message' => $e->getMessage(),
                'suggestions' => $this->getErrorSuggestions($e->getMessage())
            ];
        }
    }

    /**
     * Obter configura√ß√µes populares
     */
    public function getPopularConfigs(): array
    {
        return [
            'gmail' => [
                'name' => 'Gmail',
                'host' => 'smtp.gmail.com',
                'port' => 587,
                'encryption' => 'tls',
                'note' => 'Use uma senha de app se 2FA estiver ativado',
                'instructions' => '1. Ative 2FA na conta Google\n2. Gere senha de app em myaccount.google.com/apppasswords\n3. Use a senha de app no campo MAIL_PASSWORD'
            ],
            'outlook' => [
                'name' => 'Outlook/Hotmail',
                'host' => 'smtp-mail.outlook.com',
                'port' => 587,
                'encryption' => 'tls',
                'note' => 'Use sua senha normal',
                'instructions' => '1. Use sua senha normal da conta\n2. Verifique se SMTP est√° habilitado\n3. Pode precisar desativar 2FA temporariamente'
            ],
            'yahoo' => [
                'name' => 'Yahoo',
                'host' => 'smtp.mail.yahoo.com',
                'port' => 587,
                'encryption' => 'tls',
                'note' => 'Use uma senha de app',
                'instructions' => '1. Ative 2FA na conta Yahoo\n2. Gere senha de app nas configura√ß√µes\n3. Use a senha de app no campo MAIL_PASSWORD'
            ],
            'protonmail' => [
                'name' => 'ProtonMail',
                'host' => '127.0.0.1',
                'port' => 1025,
                'encryption' => null,
                'note' => 'Configura√ß√£o especial necess√°ria',
                'instructions' => '1. Requer configura√ß√£o especial\n2. Consulte documenta√ß√£o do ProtonMail\n3. Pode precisar de bridge local'
            ]
        ];
    }

    /**
     * Atualizar arquivo .env
     */
    private function updateEnvFile(array $data): void
    {
        $envPath = base_path('.env');
        
        if (!file_exists($envPath)) {
            throw new \Exception('Arquivo .env n√£o encontrado');
        }

        $envContent = file_get_contents($envPath);
        
        foreach ($data as $key => $value) {
            // Escapar aspas duplas na senha
            if ($key === 'MAIL_PASSWORD') {
                $value = '"' . str_replace('"', '\"', $value) . '"';
            }
            
            // Procurar e substituir a linha existente
            $pattern = "/^{$key}=.*/m";
            $replacement = "{$key}={$value}";
            
            if (preg_match($pattern, $envContent)) {
                $envContent = preg_replace($pattern, $replacement, $envContent);
            } else {
                // Se n√£o existir, adicionar no final
                $envContent .= "\n{$key}={$value}";
            }
        }

        file_put_contents($envPath, $envContent);
    }

    /**
     * Limpar cache de configura√ß√£o
     */
    private function clearConfigCache(): void
    {
        Artisan::call('config:clear');
        Artisan::call('config:cache');
    }

    /**
     * Obter conte√∫do do email de teste
     */
    private function getTestEmailContent(): string
    {
        return "Este √© um email de teste do Sistema de Den√∫ncias Corporativas.\n\n" .
               "Data/Hora: " . now()->format('d/m/Y H:i:s') . "\n" .
               "Sistema: " . config('app.name') . "\n" .
               "Vers√£o: " . config('app.version', '1.0.0') . "\n\n" .
               "Se voc√™ recebeu este email, a configura√ß√£o SMTP est√° funcionando corretamente!\n\n" .
               "Agora o sistema pode enviar:\n" .
               "‚Ä¢ Notifica√ß√µes de novas den√∫ncias\n" .
               "‚Ä¢ Alertas de mudan√ßa de status\n" .
               "‚Ä¢ Relat√≥rios e atualiza√ß√µes\n" .
               "‚Ä¢ Mensagens para usu√°rios\n\n" .
               "---\n" .
               "Sistema de Den√∫ncias Corporativas\n" .
               "Este √© um email autom√°tico, n√£o responda.";
    }

    /**
     * Obter sugest√µes para problemas de configura√ß√£o
     */
    public function getSuggestionsForIssues(array $issues): string
    {
        $suggestions = "üîß Para resolver os problemas encontrados:\n\n";
        
        foreach ($issues as $issue) {
            if (strpos($issue, 'Email remetente') !== false) {
                $suggestions .= "‚Ä¢ Configure um email remetente v√°lido (n√£o use hello@example.com)\n";
            } elseif (strpos($issue, 'Nome remetente') !== false) {
                $suggestions .= "‚Ä¢ Configure um nome remetente personalizado (n√£o use 'Laravel')\n";
            } elseif (strpos($issue, 'Host SMTP') !== false) {
                $suggestions .= "‚Ä¢ Configure o host SMTP correto (ex: smtp.gmail.com)\n";
            } elseif (strpos($issue, 'Usu√°rio SMTP') !== false) {
                $suggestions .= "‚Ä¢ Configure o usu√°rio SMTP (seu email)\n";
            } elseif (strpos($issue, 'Senha SMTP') !== false) {
                $suggestions .= "‚Ä¢ Configure a senha SMTP (use senha de app para Gmail)\n";
            } elseif (strpos($issue, 'Porta SMTP') !== false) {
                $suggestions .= "‚Ä¢ Configure a porta SMTP (587 para TLS, 465 para SSL)\n";
            }
        }
        
        return $suggestions;
    }

    /**
     * Obter sugest√µes de solu√ß√£o baseadas no erro
     */
    private function getErrorSuggestions(string $errorMessage): string
    {
        $suggestions = "üîß Sugest√µes de corre√ß√£o:\n\n";
        
        // Erros de autentica√ß√£o
        if (stripos($errorMessage, 'authentication') !== false || stripos($errorMessage, '535') !== false) {
            $suggestions .= "‚Ä¢ Verifique se o usu√°rio e senha SMTP est√£o corretos\n";
            $suggestions .= "‚Ä¢ Para Gmail: Use uma senha de app (n√£o sua senha normal)\n";
            $suggestions .= "‚Ä¢ Para Outlook: Verifique se a conta permite acesso SMTP\n";
            $suggestions .= "‚Ä¢ Para Yahoo: Use uma senha de app se 2FA estiver ativado\n\n";
        }
        
        // Erros de conex√£o
        if (stripos($errorMessage, 'connection') !== false || stripos($errorMessage, 'timeout') !== false) {
            $suggestions .= "‚Ä¢ Verifique se o host SMTP est√° correto\n";
            $suggestions .= "‚Ä¢ Teste se a porta n√£o est√° bloqueada pelo firewall\n";
            $suggestions .= "‚Ä¢ Tente portas alternativas: 587 (TLS), 465 (SSL), 25\n";
            $suggestions .= "‚Ä¢ Verifique sua conex√£o com a internet\n\n";
        }
        
        // Erros de SSL/TLS
        if (stripos($errorMessage, 'ssl') !== false || stripos($errorMessage, 'tls') !== false) {
            $suggestions .= "‚Ä¢ Verifique se a criptografia est√° configurada corretamente\n";
            $suggestions .= "‚Ä¢ Tente alternar entre TLS e SSL\n";
            $suggestions .= "‚Ä¢ Para Gmail/Outlook: Use TLS na porta 587\n";
            $suggestions .= "‚Ä¢ Para alguns provedores: Use SSL na porta 465\n\n";
        }
        
        // Erros de porta
        if (stripos($errorMessage, 'port') !== false || stripos($errorMessage, 'refused') !== false) {
            $suggestions .= "‚Ä¢ Verifique se a porta SMTP est√° correta\n";
            $suggestions .= "‚Ä¢ Gmail: 587 (TLS) ou 465 (SSL)\n";
            $suggestions .= "‚Ä¢ Outlook: 587 (TLS)\n";
            $suggestions .= "‚Ä¢ Yahoo: 587 (TLS) ou 465 (SSL)\n";
            $suggestions .= "‚Ä¢ Verifique se o firewall n√£o est√° bloqueando\n\n";
        }
        
        // Erros de from address
        if (stripos($errorMessage, 'from') !== false || stripos($errorMessage, 'sender') !== false) {
            $suggestions .= "‚Ä¢ Verifique se o email remetente est√° configurado corretamente\n";
            $suggestions .= "‚Ä¢ O email remetente deve ser o mesmo da conta SMTP\n";
            $suggestions .= "‚Ä¢ Alguns provedores n√£o permitem emails de dom√≠nios diferentes\n\n";
        }
        
        // Erros gen√©ricos
        if (stripos($errorMessage, 'stream') !== false || stripos($errorMessage, 'socket') !== false) {
            $suggestions .= "‚Ä¢ Verifique se o servidor SMTP est√° acess√≠vel\n";
            $suggestions .= "‚Ä¢ Teste a conectividade: ping smtp.gmail.com\n";
            $suggestions .= "‚Ä¢ Verifique se n√£o h√° bloqueio por antiv√≠rus/firewall\n\n";
        }
        
        // Sugest√µes gerais
        $suggestions .= "üìã Verifica√ß√µes gerais:\n";
        $suggestions .= "‚Ä¢ Confirme se o provedor de email permite SMTP\n";
        $suggestions .= "‚Ä¢ Verifique se n√£o h√° limite de envio atingido\n";
        $suggestions .= "‚Ä¢ Teste com configura√ß√µes de outro provedor\n";
        $suggestions .= "‚Ä¢ Use o modo 'log' para debug: MAIL_MAILER=log\n\n";
        
        $suggestions .= "üí° Dica: Use o comando 'php artisan test:email seu@email.com' para testar via terminal.";
        
        return $suggestions;
    }
} 